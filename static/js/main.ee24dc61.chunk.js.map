{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","Friends.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,wDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACE,4BAAKL,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEZW,G,MAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,UACb,2BACAA,UAAU,gBACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCTHP,EAAS,CACpB,CACEL,GAAG,EACHF,KAAM,QACNkB,SAAU,YACVjB,MAAO,mBAET,CACEC,GAAG,EACHF,KAAM,SACNkB,SAAU,UACVjB,MAAO,oBAET,CACEC,GAAG,EACHF,KAAM,SACNkB,SAAU,WACVjB,MAAO,oBAET,CACEC,GAAG,EACHF,KAAM,UACNkB,SAAU,YACVjB,MAAO,qBAET,CACEC,GAAG,EACHF,KAAM,SACNkB,SAAU,WACVjB,MAAO,oBAET,CACEC,GAAG,EACHF,KAAM,QACNkB,SAAU,WACVjB,MAAO,mBAET,CACEC,GAAG,EACHF,KAAM,OACNkB,SAAU,SACVjB,MAAO,kBAET,CACEC,GAAG,EACHF,KAAM,QACNkB,SAAU,WACVjB,MAAO,mBAET,CACEC,GAAG,EACHF,KAAM,SACNkB,SAAU,WACVjB,MAAO,oBAET,CACEC,GAAG,GACHF,KAAM,SACNkB,SAAU,YACVjB,MAAO,qBCjDIkB,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,MAAOC,OAAQ,UACvDJ,EAAMK,WC4CEC,E,kDAzCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACXzB,OAAOA,EACPM,YAAY,IAJF,E,qDAkBJ,IAAD,EACyBoB,KAAKD,MAA7BzB,EADD,EACCA,OAAQM,EADT,EACSA,YACVqB,EAAe3B,EAAO4B,QAAO,SAAAC,GACjC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAASzB,EAAYwB,kBAEvD,OAAqB,IAAlB9B,EAAOgC,OAED,wBAAIpC,UAAU,MAAd,cAIL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eAAmC,6BACnC,kBAAC,EAAD,CAAWW,aAAcmB,KAAKN,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAQ2B,U,GAlCZM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ee24dc61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return(\r\n    <div className='bg-light-blue dib br3 w5 pa3 ma2 grow bw2 shado-5 tc'>\r\n      <img src={`https://robohash.org/${id}?200*200`} alt=\"photo\"/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return(\r\n    <div>\r\n    {\r\n      robots.map((user, i) => {\r\n      return(\r\n        <Card\r\n          key={i}\r\n          id={robots[i].id}\r\n          name={robots[i].name}\r\n          email={robots[i].email}\r\n          />\r\n      );\r\n    })\r\n  }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return(\r\n    <div className='pa2 tc'>\r\n      <input\r\n      className='pa3 ba b--red'\r\n      type='search'\r\n      placeholder='search robots'\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","export const robots = [\r\n  {\r\n    id:1,\r\n    name: 'Keyur',\r\n    username: 'keyur1515',\r\n    email: 'keyur@gmail.com'\r\n  },\r\n  {\r\n    id:2,\r\n    name: 'Monesh',\r\n    username: 'monster',\r\n    email: 'monesh@gmail.com'\r\n  },\r\n  {\r\n    id:3,\r\n    name: 'Nikhil',\r\n    username: 'nikhil11',\r\n    email: 'nikhil@gmail.com'\r\n  },\r\n  {\r\n    id:4,\r\n    name: 'Shreyas',\r\n    username: 'shreyas01',\r\n    email: 'shreyas@gmail.com'\r\n  },\r\n  {\r\n    id:5,\r\n    name: 'Nitika',\r\n    username: 'nitika15',\r\n    email: 'nitika@gmail.com'\r\n  },\r\n  {\r\n    id:6,\r\n    name: 'Rushi',\r\n    username: 'rushi123',\r\n    email: 'rushi@gmail.com'\r\n  },\r\n  {\r\n    id:7,\r\n    name: 'Akul',\r\n    username: 'akul34',\r\n    email: 'akul@gmail.com'\r\n  },\r\n  {\r\n    id:8,\r\n    name: 'Reddy',\r\n    username: 'reddy123',\r\n    email: 'reddy@gmail.com'\r\n  },\r\n  {\r\n    id:9,\r\n    name: 'Aditya',\r\n    username: 'aditya22',\r\n    email: 'aditya@gmail.com'\r\n  },\r\n  {\r\n    id:10,\r\n    name: 'Chetan',\r\n    username: 'chetan123',\r\n    email: 'chetan@gmail.com'\r\n  },\r\n]\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '1px', height: '500px' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport './App.css';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robots } from '../Friends';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots:robots,\r\n      searchfield:''\r\n    }\r\n  }\r\n\r\n  //componentDidMount() {\r\n    //fetch('https://jsonplaceholder.typicode.com/users')\r\n    //.then(response => response.json())\r\n    //.then(users => {this.setState({ robots: users})});\r\n  //}\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filterRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n    if(robots.length === 0)//or you can write (!robots.length)\r\n    {\r\n      return <h1 className='tc'>LOADING...</h1>\r\n    }\r\n    else {\r\n      return(\r\n        <div className='tc'>\r\n          <h1 className='f2'>RoboFriends</h1><hr/>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={filterRobots}/>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { robots } from './Friends';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}